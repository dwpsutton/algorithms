{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 \ul \ulc0 Lesson 3:  DIVIDE AND CONQUER
\b0 \ulnone \
\
General process:\
Step 1: divide the problem into smaller sub problems.\
Step 2: solve each subproblem recursively.\
Step 3: combine each solved subproblem together.\
\
This is demonstrated first with the problem of 
\b counting inversions in an array
\b0 .  An inversion in this sense is the total count for out of order elements of the number of elements to its right that are mis-ordered wrt. to itself.  Formally, this is the number of pairs [i,j] where i<j and A[i] > A[j].  You can clearly see that the max number of such inversions for a length 6 array would be 5+4+3+2+1=15.  Formally this is n choose 2 = n(n-1)/2\
\
The O(nlogn) algorithm is motivated by mergeSort. We split the input array into two sub arrays and count inversions in each sub array, before summing these, then adding the number of \'91split inversions\'92: the number of elements in subarray 1 that are larger than any element in sub array 2.  This lends itself to the merge algorithm from mergesort.  If the subarrays are sorted, we can compare element i from a to element j from b, as for mergesort.  If a[i] > b[j], then the number of split inversions is len(a) - i.\
\
\

\b \ul Lesson 4: Closest pair of points in 2D\
\

\b0 \ulnone In 1d this is trivial.  Sort the array, O(nlogn) then compare each element to the next one, O(n).\
\
In 2d, the naive algorithm is O(n^2).  Compare each points Euclidean distance to each other point, select the smallest.\
\
There is a smart nlogn algorithm for 2d however.  First we sort the set of points in x and y dimensions separately, so we have separate Px and Py.  We do a divide and conquer algorithm, asking what the smallest separation is between all points with i < n/2 for Px (and equivalently for i > n/2).  The trick is to ensure an O(n) algorithm for detecting pairs between the two sets that are closer than the closest pairs in each set.\
\
This can be done by first noting that we do not need to compare every point in set <n/2 and set >n/2.  We only need to compare points that may be closer than the closest pair in <n/2 and >n/2.  Call this target closeness delta.  We only need to consider points k where  | px[k] - px[n/2] | < delta.\
\
We select these points, Sy, and find we have a sorted array of their y values, py.   The beauty of the algorithm comes from the observation that we only need to compare Sy[i] with Sy[ i+1 : min( i+7, n) ].  This follows from a geometric argument that invokes sparsity of the area in the strip | px[i] - px[n/2] |.  A maximum of 1 point may exist in each of the 8 (delta/2 * delta/2) sized boxes between [px[i] < x < px+delta]   and   [py[n/2] - delta < y < py[n/2] + delta.], and this includes the point px[i].  So we only need to compare to the next 7 points.\
\
This means we still have an O(n) algorithm.  If at any point we find that delta is already smaller than the split pairs, we can immediately exit the algorithm as we have the closest pair.}